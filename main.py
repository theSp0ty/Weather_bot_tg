import logging
import os
import random
import re
import requests
import json
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv

load_dotenv()

USER_DATA_FILE = 'users.json'
user_states = {}
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')
TIMEZONEDB_API_KEY = os.getenv('TIMEZONEDB_API_KEY')

def save_user_states():
    global user_states
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_states, f, ensure_ascii=False, indent=2)

def load_user_states():
    global user_states
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            user_states = json.load(f)
    except Exception:
        user_states = {}

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

main_keyboard = ReplyKeyboardMarkup([
    [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ üèôÔ∏è"), KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ üóëÔ∏è")],
    [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É üå¶Ô∏è"), KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É"), KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è ‚è∞")]
], resize_keyboard=True)

scheduler = BackgroundScheduler()

def get_wish():
    wishes = [
        "–ñ–µ–ª–∞—é –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üòäüåû",
        "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üí™‚ú®",
        "–°–æ–ª–Ω–µ—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —É–¥–∞—á–∏! ‚òÄÔ∏èüçÄ",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º –∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã–º! üïäÔ∏èüòÉ",
        "–ü—É—Å—Ç—å –ø–æ–≥–æ–¥–∞ —Ä–∞–¥—É–µ—Ç, –∞ –¥–µ–ª–∞ —Å–ø–æ—Ä—è—Ç—Å—è! üå§Ô∏èüìà",
        "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤! üéÅüòÑ",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —Å—á–∞—Å—Ç–ª–∏–≤—ã–º! ü•≥üåà",
        "–ü—É—Å—Ç—å —É–ª—ã–±–∫–∞ –Ω–µ —Å—Ö–æ–¥–∏—Ç —Å –ª–∏—Ü–∞! üòÅüòä",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! üì∞üëç",
        "–ü—É—Å—Ç—å –≤—Å—ë –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è! üéØüôå",
        "–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Å–≤–µ—Ç–æ–º! üåü",
        "–ü—É—Å—Ç—å —É–¥–∞—á–∞ —Å–æ–ø—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –¥–µ–ª–∞—Ö! üçÄ",
        "–ü—É—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ –≤—ã—Å–æ—Ç–µ! üòÉ",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã! üéâ",
        "–ü—É—Å—Ç—å –≤ –¥—É—à–µ –±—É–¥–µ—Ç —Ç–µ–ø–ª–æ –∏ –≥–∞—Ä–º–æ–Ω–∏—è! üßò‚Äç‚ôÇÔ∏è",
        "–ü—É—Å—Ç—å –≤—Å–µ –º–µ—á—Ç—ã —Å–±—É–¥—É—Ç—Å—è! ‚ú®",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —è—Ä–∫–∏–º –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º! üåà",
        "–ü—É—Å—Ç—å –≤–æ–∫—Ä—É–≥ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –¥–æ–±—Ä—ã–µ –ª—é–¥–∏! ü§ó",
        "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –ø–æ–≤–æ–¥–æ–≤ –¥–ª—è —É–ª—ã–±–∫–∏! üòÑ",
        "–ü—É—Å—Ç—å –≤—Å—ë –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ª–µ–≥–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ! üöÄ"
    ]
    return random.choice(wishes)

async def get_timezone_by_city(city):
    try:
        url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        resp = requests.get(url, timeout=5)
        data = resp.json()
        if not data:
            return None
        lat = data[0]['lat']
        lon = data[0]['lon']
    except Exception:
        return None
    try:
        tz_url = f"http://api.timezonedb.com/v2.1/get-time-zone?key={TIMEZONEDB_API_KEY}&format=json&by=position&lat={lat}&lng={lon}"
        tz_resp = requests.get(tz_url, timeout=5)
        tz_data = tz_resp.json()
        if tz_data.get('status') == 'OK':
            return tz_data.get('zoneName')
        else:
            return None
    except Exception:
        return None

async def get_weather_brief(city):
    try:
        translate_url = "https://libretranslate.de/translate"
        payload = {"q": city, "source": "ru", "target": "en", "format": "text"}
        resp = requests.post(translate_url, json=payload, timeout=5)
        city_en = resp.json().get("translatedText", city) if resp.status_code == 200 else city
    except Exception:
        city_en = city
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city_en}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        data = response.json()
        if data.get('cod') != "200":
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}."
        temps, winds, rain_hours = [], [], []
        for item in data['list']:
            hour = int(item['dt_txt'][11:13])
            if 6 <= hour <= 21:
                temps.append(item['main']['temp'])
                winds.append(item['wind']['speed'])
                if 'rain' in item and item['rain'].get('3h', 0) > 0:
                    rain_hours.append(item['dt_txt'][11:16])
        if not temps:
            return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –Ω–∞ —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å –¥–ª—è {city}."
        temp_max = max(temps)
        temp_min = min(temps)
        wind_avg = round(sum(winds) / len(winds), 1)
        rain_hours = sorted(set(rain_hours), key=lambda x: x)
        rain_ranges = []
        if rain_hours:
            start = end = rain_hours[0]
            for h in rain_hours[1:]:
                prev_hour = int(end[:2])
                curr_hour = int(h[:2])
                if curr_hour == prev_hour + 3:
                    end = h
                else:
                    rain_ranges.append((start, end))
                    start = end = h
            rain_ranges.append((start, end))
            if len(rain_ranges) == 1 and rain_ranges[0][0] == rain_ranges[0][1]:
                rain_text = f"–î–æ–∂–¥—å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ {rain_ranges[0][0]}"
            else:
                rain_text = "–î–æ–∂–¥—å:\n" + '\n'.join([f"‚Ä¢ —Å {r[0]} –ø–æ {r[1]}" if r[0] != r[1] else f"‚Ä¢ –≤ {r[0]}" for r in rain_ranges])
        else:
            rain_text = "–ë–µ–∑ –¥–æ–∂–¥—è"
        return f"{city}:\n{rain_text}\n–í–µ—Ç–µ—Ä: {wind_avg} –º/—Å\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {temp_min}¬∞C –¥–æ {temp_max}¬∞C"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

async def send_weather_job(user_id):
        state = user_states.get(user_id)
        print(f"[Job] user_id={user_id}, state={state}")
        if not state or not state.get("cities"):
            print(f"[Job] –ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è user_id={user_id}")
            return
        notify_city = state.get("notify_city")
        if not notify_city:
            print(f"[Job] –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É user_id={user_id}")
            return
        print(f"[Job] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {notify_city}")
        weather_text = await get_weather_brief(notify_city)
        wish = get_wish()
        if TELEGRAM_TOKEN is None:
            print("[Job] TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
            raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
        bot = Bot(token=TELEGRAM_TOKEN)
        try:
            await bot.send_message(chat_id=user_id, text=f"{weather_text}\n{wish}")
            print(f"[Job] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
        except Exception as e:
            print(f"[Job] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def send_weather_job_sync(user_id):
    import asyncio
    print(f"[Scheduler] –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è user_id={user_id}")
    try:
        asyncio.run(send_weather_job(user_id))
    except Exception as e:
        print(f"[Scheduler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    user_states[user_id]["remove_mode"] = False
    user_states[user_id]["add_mode"] = False
    user_states[user_id]["time_mode"] = False
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if user_states[user_id].get("send_time") is None:
        text += "\n\n‚ùó –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è (–∫–Ω–æ–ø–∫–∞ \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è ‚è∞\")."
    await update.message.reply_text(text, reply_markup=main_keyboard)

async def add_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    for uid in user_states:
        user_states[uid]["add_mode"] = False
    user_states[user_id]["add_mode"] = True
    user_states[user_id]["remove_mode"] = False
    user_states[user_id]["time_mode"] = False
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")

async def remove_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    state = user_states[user_id]
    cities = state["cities"]
    if not cities:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard)
        return
    state["remove_mode"] = True
    state["add_mode"] = False
    state["time_mode"] = False
    await update.message.reply_text(f"–í–∞—à–∏ –≥–æ—Ä–æ–¥–∞: {', '.join(cities)}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    state = user_states[user_id]
    state["time_mode"] = True
    state["add_mode"] = False
    state["remove_mode"] = False
    cities = state["cities"]
    if cities:
        state["choose_time_city_mode"] = True
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(c)] for c in cities], resize_keyboard=True)
        )
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥.", reply_markup=main_keyboard)

async def city_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    state = user_states[user_id]
    # Handle city selection for time setting
    if state.get("choose_time_city_mode"):
        if update.message and update.message.text:
            chosen_city = update.message.text.strip().title()
        else:
            chosen_city = ""
        if chosen_city in state["cities"]:
            state["notify_city"] = chosen_city
            state["choose_time_city_mode"] = False
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –≥–æ—Ä–æ–¥—É {chosen_city} (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):",
                reply_markup=main_keyboard
            )
            state["time_mode"] = True
            save_user_states()
            return
        else:
            await update.message.reply_text(
                f"–ì–æ—Ä–æ–¥ {chosen_city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(c)] for c in state["cities"]], resize_keyboard=True)
            )
            return
    city = update.message.text
    if city is not None:
        city = city.strip()
        city = city.title()
    else:
        city = ""
    if state.get("add_mode"):
        state["add_mode"] = False
        cities_lower = [c.lower() for c in state["cities"]]
        if city.lower() not in cities_lower:
            state["cities"].append(city)
            timezone = await get_timezone_by_city(city)
            state["timezone"] = timezone
            await update.message.reply_text(
                f"‚úÖ –ì–æ—Ä–æ–¥ {city} –¥–æ–±–∞–≤–ª–µ–Ω! –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone if timezone else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}.\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É? –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É üå¶Ô∏è' –¥–ª—è –≤—ã–±–æ—Ä–∞.",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(c)] for c in state["cities"]] + [[KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥')]], resize_keyboard=True)
            )
            state["choose_city_mode"] = True
            save_user_states()
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {city} —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=main_keyboard)
        return
    if state.get("remove_mode"):
        state["remove_mode"] = False
        if city in state["cities"]:
            state["cities"].remove(city)
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ {city} —É–¥–∞–ª—ë–Ω.", reply_markup=main_keyboard)
            save_user_states()
        else:
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=main_keyboard)
        return
    if state.get("choose_city_mode"):
        chosen_city = update.message.text
        if chosen_city is not None:
            chosen_city = chosen_city.strip().title()
        else:
            chosen_city = ""
        city_buttons = [[KeyboardButton(c)] for c in state["cities"]]
        city_buttons.append([KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥')])
        if chosen_city.strip().lower() == '‚ûï –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥'.lower():
            state["add_mode"] = True
            state["choose_city_mode"] = False
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
            save_user_states()
            return
        if chosen_city in state["cities"]:
            state["notify_city"] = chosen_city
            state["choose_city_mode"] = False
            time_options = ['07:00', '07:30', '08:00', '08:30', '09:00', '09:30', '10:00', '10:30',
                            '18:00', '18:30', '19:00', '19:30', '20:00', '20:30']
            keyboard = [[KeyboardButton(t)] for t in time_options]
            keyboard.append([KeyboardButton('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è')])
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ {chosen_city} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è':",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            state["choose_time_mode"] = True
            save_user_states()
            return
        else:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {chosen_city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
                reply_markup=ReplyKeyboardMarkup(city_buttons, resize_keyboard=True)
            )
        return
    if state.get("choose_time_mode"):
        time_text = update.message.text
        if time_text is not None:
            time_text = time_text.strip()
        else:
            time_text = ""
        time_options = ['07:00', '07:30', '08:00', '08:30', '09:00', '09:30', '10:00', '10:30',
                        '18:00', '18:30', '19:00', '19:30', '20:00', '20:30']
        if time_text == '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è':
            state["custom_time_mode"] = True
            state["choose_time_mode"] = False
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 06:45):")
            save_user_states()
            return
        if time_text in time_options:
            state["send_time"] = time_text
            state["choose_time_mode"] = False
            await update.message.reply_text(
                f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥—É {state['notify_city']} –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_text}!",
                reply_markup=main_keyboard
            )
            save_user_states()
            return
    if state.get("custom_time_mode"):
        time_text = update.message.text
        if time_text is not None:
            time_text = time_text.strip()
        else:
            time_text = ""
        if re.match(r'^([01]\d|2[0-3]):[0-5]\d$', time_text):
            state["send_time"] = time_text
            state["custom_time_mode"] = False
            await update.message.reply_text(
                f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥—É {state['notify_city']} –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_text}!",
                reply_markup=main_keyboard
            )
            save_user_states()
        else:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 06:45.")
        return

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    state = user_states[user_id]
    cities = state["cities"]
    if not cities:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥.", reply_markup=main_keyboard)
        return
    notify_city = state.get("notify_city")
    if not notify_city or notify_city not in cities:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(c)] for c in cities] + [[KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥')]], resize_keyboard=True)
        )
        state["choose_city_mode"] = True
        return
    weather_text = await get_weather_brief(notify_city)
    wish = get_wish()
    await update.message.reply_text(f"{weather_text}\n{wish}", reply_markup=main_keyboard)

async def view_weather_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    state = user_states[user_id]
    state["view_weather_mode"] = True
    if state["cities"]:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(c)] for c in state["cities"]], resize_keyboard=True))
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:")
    save_user_states()

def main():
    load_user_states()
    print(f"[Main] user_states: {user_states}")
    for user_id, state in user_states.items():
        send_time = state.get("send_time")
        timezone = state.get("timezone", "Europe/Moscow")
        notify_city = state.get("notify_city")
        print(f"[Main] user_id={user_id}, send_time={send_time}, notify_city={notify_city}")
        if send_time:
            hour, minute = map(int, send_time.split(":"))
            job_id = f"weather_{user_id}"
            print(f"[Main] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: user_id={user_id}, job_id={job_id}, time={send_time}, city={notify_city}")
            scheduler.add_job(send_weather_job_sync, "cron", hour=hour, minute=minute, args=[user_id], id=job_id, replace_existing=True, timezone=timezone)
    scheduler.start()
    print("[Main] Scheduler –∑–∞–ø—É—â–µ–Ω")
    if TELEGRAM_TOKEN is None:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"), add_city))
    app.add_handler(MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥"), remove_city))
    app.add_handler(MessageHandler(filters.Regex("^–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è"), set_time))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É"), weather))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É"), view_weather_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, city_handler))
    app.run_polling()

if __name__ == '__main__':
    main()