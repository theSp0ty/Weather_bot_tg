def update_user_job(user_id):
    state = user_states.get(user_id)
    if not state:
        print(f"[JobUpdate] –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è user_id={user_id}")
        return
    send_time = state.get("send_time")
    notify_city = state.get("notify_city")
    timezones = state.get("timezones", {})
    timezone = timezones.get(notify_city, "Europe/Moscow")
    job_id = f"weather_{user_id}"
    print(f"[JobUpdate] user_id={user_id}, send_time={send_time}, notify_city={notify_city}, timezone={timezone}")
    if send_time and notify_city:
        hour, minute = map(int, send_time.split(":"))
        print(f"[JobUpdate] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: user_id={user_id}, job_id={job_id}, time={send_time}, city={notify_city}, tz={timezone}")
        scheduler.add_job(send_weather_job_sync, "cron", hour=hour, minute=minute, args=[user_id], id=job_id, replace_existing=True, timezone=timezone)
        print(f"[JobUpdate] –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {scheduler.get_job(job_id)}")
    else:
        print(f"[JobUpdate] –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏: user_id={user_id}")
        try:
            scheduler.remove_job(job_id)
        except Exception:
            pass
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ù–∞–π—Ç–∏ update.message –¥–ª—è user_id (—á–µ—Ä–µ–∑ context –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π update)
        # –õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ city_handler –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
import logging
import os
import random
import re
import requests
import json
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv

load_dotenv()

USER_DATA_FILE = 'users.json'
user_states = {}
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')
TIMEZONEDB_API_KEY = os.getenv('TIMEZONEDB_API_KEY')

def save_user_states():
    global user_states
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_states, f, ensure_ascii=False, indent=2)

def load_user_states():
    global user_states
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            user_states = json.load(f)
    except Exception:
        user_states = {}

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

main_keyboard = ReplyKeyboardMarkup([
    [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ üèôÔ∏è"), KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ üóëÔ∏è")],
    [KeyboardButton("–ú–æ–∏ –≥–æ—Ä–æ–¥–∞ üìã"), KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üïí")],
    [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É üå¶Ô∏è"), KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É üåç"), KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è ‚è∞")],
    [KeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚ùå"), KeyboardButton("–ü–æ–º–æ—â—å /help")]
], resize_keyboard=True)

scheduler = BackgroundScheduler()

def get_wish():
    wishes = [
        "–ñ–µ–ª–∞—é –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üòäüåû",
        "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üí™‚ú®",
        "–°–æ–ª–Ω–µ—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —É–¥–∞—á–∏! ‚òÄÔ∏èüçÄ",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º –∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã–º! üïäÔ∏èüòÉ",
        "–ü—É—Å—Ç—å –ø–æ–≥–æ–¥–∞ —Ä–∞–¥—É–µ—Ç, –∞ –¥–µ–ª–∞ —Å–ø–æ—Ä—è—Ç—Å—è! üå§Ô∏èüìà",
        "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤! üéÅüòÑ",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —Å—á–∞—Å—Ç–ª–∏–≤—ã–º! ü•≥üåà",
        "–ü—É—Å—Ç—å —É–ª—ã–±–∫–∞ –Ω–µ —Å—Ö–æ–¥–∏—Ç —Å –ª–∏—Ü–∞! üòÅüòä",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! üì∞üëç",
        "–ü—É—Å—Ç—å –≤—Å—ë –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è! üéØüôå",
        "–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Å–≤–µ—Ç–æ–º! üåü",
        "–ü—É—Å—Ç—å —É–¥–∞—á–∞ —Å–æ–ø—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –¥–µ–ª–∞—Ö! üçÄ",
        "–ü—É—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ –≤—ã—Å–æ—Ç–µ! üòÉ",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã! üéâ",
        "–ü—É—Å—Ç—å –≤ –¥—É—à–µ –±—É–¥–µ—Ç —Ç–µ–ø–ª–æ –∏ –≥–∞—Ä–º–æ–Ω–∏—è! üßò‚Äç‚ôÇÔ∏è",
        "–ü—É—Å—Ç—å –≤—Å–µ –º–µ—á—Ç—ã —Å–±—É–¥—É—Ç—Å—è! ‚ú®",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —è—Ä–∫–∏–º –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º! üåà",
        "–ü—É—Å—Ç—å –≤–æ–∫—Ä—É–≥ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –¥–æ–±—Ä—ã–µ –ª—é–¥–∏! ü§ó",
        "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –ø–æ–≤–æ–¥–æ–≤ –¥–ª—è —É–ª—ã–±–∫–∏! üòÑ",
        "–ü—É—Å—Ç—å –≤—Å—ë –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ª–µ–≥–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ! üöÄ"
    ]
    return random.choice(wishes)

async def get_timezone_by_city(city):
    try:
        url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        resp = requests.get(url, timeout=5)
        data = resp.json()
        if not data:
            return None
        lat = data[0]['lat']
        lon = data[0]['lon']
    except Exception:
        return None
    try:
        tz_url = f"http://api.timezonedb.com/v2.1/get-time-zone?key={TIMEZONEDB_API_KEY}&format=json&by=position&lat={lat}&lng={lon}"
        tz_resp = requests.get(tz_url, timeout=5)
        tz_data = tz_resp.json()
        if tz_data.get('status') == 'OK':
            return tz_data.get('zoneName')
        else:
            return None
    except Exception:
        return None

async def get_weather_brief(city):
    try:
        translate_url = "https://libretranslate.de/translate"
        payload = {"q": city, "source": "ru", "target": "en", "format": "text"}
        resp = requests.post(translate_url, json=payload, timeout=5)
        city_en = resp.json().get("translatedText", city) if resp.status_code == 200 else city
    except Exception:
        city_en = city
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city_en}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        data = response.json()
        if data.get('cod') != "200":
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}."
        temps, winds, rain_hours = [], [], []
        for item in data['list']:
            hour = int(item['dt_txt'][11:13])
            if 6 <= hour <= 21:
                temps.append(item['main']['temp'])
                winds.append(item['wind']['speed'])
                if 'rain' in item and item['rain'].get('3h', 0) > 0:
                    rain_hours.append(item['dt_txt'][11:16])
        if not temps:
            return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –Ω–∞ —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å –¥–ª—è {city}."
        temp_max = max(temps)
        temp_min = min(temps)
        wind_avg = round(sum(winds) / len(winds), 1)
        rain_hours = sorted(set(rain_hours), key=lambda x: x)
        rain_ranges = []
        if rain_hours:
            start = end = rain_hours[0]
            for h in rain_hours[1:]:
                prev_hour = int(end[:2])
                curr_hour = int(h[:2])
                if curr_hour == prev_hour + 3:
                    end = h
                else:
                    rain_ranges.append((start, end))
                    start = end = h
            rain_ranges.append((start, end))
            # –ï—Å–ª–∏ –¥–æ–∂–¥—å –ø–æ—á—Ç–∏ –≤–µ—Å—å –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å 6 –¥–æ 21)
            day_start, day_end = "06:00", "21:00"
            if len(rain_ranges) == 1 and rain_ranges[0][0] == day_start and rain_ranges[0][1] == day_end:
                rain_text = "–î–æ–∂–¥—å –≤–µ—Å—å –¥–µ–Ω—å"
            elif len(rain_ranges) == 1 and rain_ranges[0][0] == rain_ranges[0][1]:
                rain_text = f"–î–æ–∂–¥—å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ {rain_ranges[0][0]}"
            else:
                rain_text = "–î–æ–∂–¥—å:\n" + '\n'.join([f"‚Ä¢ —Å {r[0]} –ø–æ {r[1]}" if r[0] != r[1] else f"‚Ä¢ –≤ {r[0]}" for r in rain_ranges])
        else:
            rain_text = "–ë–µ–∑ –¥–æ–∂–¥—è"
        return f"{city}:\n{rain_text}\n–í–µ—Ç–µ—Ä: {wind_avg} –º/—Å\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {temp_min}¬∞C –¥–æ {temp_max}¬∞C"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

async def get_weather_5days(city):
    try:
        translate_url = "https://libretranslate.de/translate"
        payload = {"q": city, "source": "ru", "target": "en", "format": "text"}
        resp = requests.post(translate_url, json=payload, timeout=5)
        city_en = resp.json().get("translatedText", city) if resp.status_code == 200 :