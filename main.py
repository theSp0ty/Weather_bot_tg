

import logging
import os
import random
import re
import requests
import json
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

from dotenv import load_dotenv
load_dotenv()

from dotenv import load_dotenv
load_dotenv()

USER_DATA_FILE = 'users.json'
user_states = {}
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY')
TIMEZONEDB_API_KEY = os.getenv('TIMEZONEDB_API_KEY')

# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∏—Ç—å:
print("TELEGRAM_TOKEN:", TELEGRAM_TOKEN)

def save_user_states():
    global user_states
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_states, f, ensure_ascii=False, indent=2)

def load_user_states():
    global user_states
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            user_states = json.load(f)
    except Exception:
        user_states = {}

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

main_keyboard = ReplyKeyboardMarkup([
    [
        KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ üèôÔ∏è"),
        KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ üóëÔ∏è")
    ],
    [
        KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É üå¶Ô∏è"),
        KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è ‚è∞")
    ]
], resize_keyboard=True)

scheduler = BackgroundScheduler()

async def get_weather(city):
    try:
        translate_url = "https://libretranslate.de/translate"
        payload = {
            "q": city,
            "source": "ru",
            "target": "en",
            "format": "text"
        }
        resp = requests.post(translate_url, json=payload, timeout=5)
        if resp.status_code == 200:
            city_en = resp.json().get("translatedText", city)
        else:
            city_en = city
    except Exception:
        city_en = city
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city_en}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        data = response.json()
        if data.get('cod') != 200:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}."
        temp = data['main']['temp']
        desc = data['weather'][0]['description']
        return f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {desc}, {temp}¬∞C."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

def get_wish():
    wishes = [
        "–ñ–µ–ª–∞—é –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üòäüåû",
        "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üí™‚ú®",
        "–°–æ–ª–Ω–µ—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —É–¥–∞—á–∏! ‚òÄÔ∏èüçÄ",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º –∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã–º! üïäÔ∏èüòÉ",
        "–ü—É—Å—Ç—å –ø–æ–≥–æ–¥–∞ —Ä–∞–¥—É–µ—Ç, –∞ –¥–µ–ª–∞ —Å–ø–æ—Ä—è—Ç—Å—è! üå§Ô∏èüìà",
        "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤! üéÅüòÑ",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —Å—á–∞—Å—Ç–ª–∏–≤—ã–º! ü•≥üåà",
        "–ü—É—Å—Ç—å —É–ª—ã–±–∫–∞ –Ω–µ —Å—Ö–æ–¥–∏—Ç —Å –ª–∏—Ü–∞! üòÅüòä",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! üì∞üëç",
        "–ü—É—Å—Ç—å –≤—Å—ë –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è! üéØüôå"
    ]
    return random.choice(wishes)

async def get_timezone_by_city(city):
    try:
        url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
        resp = requests.get(url, timeout=5)
        data = resp.json()
        if not data:
            return None
        lat = data[0]['lat']
        lon = data[0]['lon']
    except Exception:
        return None
    try:
        tz_url = f"http://api.timezonedb.com/v2.1/get-time-zone?key={TIMEZONEDB_API_KEY}&format=json&by=position&lat={lat}&lng={lon}"
        tz_resp = requests.get(tz_url, timeout=5)
        tz_data = tz_resp.json()
        if tz_data.get('status') == 'OK':
            return tz_data.get('zoneName')
        else:
            return None
    except Exception:
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    user_states[user_id]["remove_mode"] = False
    user_states[user_id]["add_mode"] = False
    user_states[user_id]["time_mode"] = False
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    if user_states[user_id].get("send_time") is None:
        text += "\n\n‚ùó –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è (–∫–Ω–æ–ø–∫–∞ \"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è ‚è∞\")."
    await update.message.reply_text(text, reply_markup=main_keyboard)

async def add_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for uid in user_states:
        user_states[uid]["add_mode"] = False
    user_states[user_id]["add_mode"] = True
    user_states[user_id]["remove_mode"] = False
    user_states[user_id]["time_mode"] = False
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")

async def remove_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    state = user_states[user_id]
    cities = state["cities"]
    if not cities:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard)
        return
    state["remove_mode"] = True
    state["add_mode"] = False
    state["time_mode"] = False
    await update.message.reply_text(f"–í–∞—à–∏ –≥–æ—Ä–æ–¥–∞: {', '.join(cities)}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    user_states[user_id]["time_mode"] = True
    user_states[user_id]["add_mode"] = False
    user_states[user_id]["remove_mode"] = False
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")

async def city_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    state = user_states[user_id]
    city = update.message.text.strip()
    # –ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤–∏–¥—É: –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ—á–Ω—ã–µ, –Ω–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å title()
    if city:
        city = city.title()
    if state.get("add_mode"):
        state["add_mode"] = False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ä–æ–¥–∞ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        cities_lower = [c.lower() for c in state["cities"]]
        if city.lower() not in cities_lower:
            state["cities"].append(city)
            timezone = await get_timezone_by_city(city)
            state["timezone"] = timezone
            # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            state["notify_city"] = city
            await update.message.reply_text(
                f"‚úÖ –ì–æ—Ä–æ–¥ {city} –¥–æ–±–∞–≤–ª–µ–Ω! –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone if timezone else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}.\n\n–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É üå¶Ô∏è' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ–¥.",
                reply_markup=main_keyboard)
            save_user_states()
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {city} —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=main_keyboard)
        return
    if state.get("remove_mode"):
        state["remove_mode"] = False
        if city in state["cities"]:
            state["cities"].remove(city)
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ {city} —É–¥–∞–ª—ë–Ω.", reply_markup=main_keyboard)
            save_user_states()
        else:
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=main_keyboard)
        return
    if state.get("time_mode"):
        if city is None:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)", reply_markup=main_keyboard)
            return
        time_text = city.strip()
        if not re.match(r"^([01]?\d|2[0-3]):[0-5]\d$", time_text):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)", reply_markup=main_keyboard)
            return
        state["time_mode"] = False
        state["send_time"] = time_text
        await update.message.reply_text(f"–í—Ä–µ–º—è {time_text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=main_keyboard)
        save_user_states()
        job_id = f"weather_{user_id}"
        try:
            scheduler.remove_job(job_id)
        except Exception:
            pass
        hour, minute = map(int, time_text.split(":"))
        timezone = state.get("timezone", "Europe/Moscow")
        scheduler.add_job(send_weather_job, "cron", hour=hour, minute=minute, args=[user_id], id=job_id, replace_existing=True, timezone=timezone)
        return

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id is None or update.message is None:
        return
    if user_id not in user_states:
        user_states[user_id] = {"cities": [], "remove_mode": False, "add_mode": False, "time_mode": False, "send_time": None}
    state = user_states[user_id]
    cities = state["cities"]
    if not cities:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥.", reply_markup=main_keyboard)
        return
    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    notify_city = state.get("notify_city")
    if not notify_city or notify_city not in cities:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(c)] for c in cities], resize_keyboard=True)
        )
        state["choose_city_mode"] = True
        return
    # –ö—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    weather_text = await get_weather_brief(notify_city)
    wish = get_wish()
    await update.message.reply_text(f"{weather_text}\n{wish}", reply_markup=main_keyboard)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    if state.get("choose_city_mode"):
        chosen_city = city.title()
        if chosen_city in state["cities"]:
            state["notify_city"] = chosen_city
            state["choose_city_mode"] = False
            await update.message.reply_text(f"‚úÖ –ì–æ—Ä–æ–¥ {chosen_city} –≤—ã–±—Ä–∞–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=main_keyboard)
            save_user_states()
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {chosen_city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=main_keyboard)
        return
async def get_weather_brief(city):
    # –ö—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å
    try:
        translate_url = "https://libretranslate.de/translate"
        payload = {
            "q": city,
            "source": "ru",
            "target": "en",
            "format": "text"
        }
        resp = requests.post(translate_url, json=payload, timeout=5)
        if resp.status_code == 200:
            city_en = resp.json().get("translatedText", city)
        else:
            city_en = city
    except Exception:
        city_en = city
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city_en}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        data = response.json()
        if data.get('cod') != 200:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}."
        temp = data['main']['temp']
        desc = data['weather'][0]['description']
        wind = data['wind']['speed']
        humidity = data['main']['humidity']
        return f"{city}: {desc}, {temp}¬∞C, –≤–µ—Ç–µ—Ä {wind} –º/—Å, –≤–ª–∞–∂–Ω–æ—Å—Ç—å {humidity}%"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

async def send_weather_job(user_id):
    state = user_states.get(user_id)
    if not state or not state.get("cities"):
        return
    notify_city = state.get("notify_city")
    if not notify_city:
        return
    weather_text = await get_weather_brief(notify_city)
    wish = get_wish()
    bot = Bot(token=TELEGRAM_TOKEN)
    try:
        await bot.send_message(chat_id=user_id, text=f"{weather_text}\n{wish}")
    except Exception:
        pass

def main():
    load_user_states()
    for user_id, state in user_states.items():
        send_time = state.get("send_time")
        timezone = state.get("timezone", "Europe/Moscow")
        if send_time:
            hour, minute = map(int, send_time.split(":"))
            job_id = f"weather_{user_id}"
            scheduler.add_job(send_weather_job, "cron", hour=hour, minute=minute, args=[user_id], id=job_id, replace_existing=True, timezone=timezone)
    scheduler.start()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"), add_city))
    app.add_handler(MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥"), remove_city))
    app.add_handler(MessageHandler(filters.Regex("^–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è"), set_time))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É"), weather))
    # –õ–æ–≤–∏–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ä–µ–∂–∏–º—ã add/remove/time —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, city_handler))
    app.run_polling()

if __name__ == '__main__':
    main()